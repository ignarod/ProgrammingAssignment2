
## creamos un vector especial que puede almacenar en el cach√© su inverso

makeCacheMatrix <- function(x = matrix()) {

	##suponemos su propiedad inversa
	i <- NULL

	##configuramos la matriz
set <- function( matrix ) {
      m <<- matrix
      i <<- NULL
    }

    ##obtenemos la matriz
get <- function() {
	m
    }

    ##establecemos el invero de la matriz
    setInverse <- function(inverse) {
        i <<- inverse
    }

    ##obtenemos la matriz
    getInverse <- function() {
        ## corremos la propiedad inversa
        i
    }

    ## regresamos la lista de metodos
    list(set = set, get = get,
         setInverse = setInverse,
 	   getInverse = getInverse)
}


cacheSolve <- function(x, ...) {

    m <- x$getInverse()

 
    if( !is.null(m) ) {
            message("getting cached data")
            return(m)
    }

    ## obtenemos la matriz de nuestro objeto
    data <- x$get()

    ## calculamos la inversa
    m <- solve(data) %*% data
    x$setInverse(m)
